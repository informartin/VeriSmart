#!/usr/bin/env node

const program = require('commander');
const verify = require('../checkValidity.js')

program
    .option('-S, --source_rpc <required>', 'Source RPC')
    .option('-s, --source_contract_address <required>', 'Source contract address')
    .option('-b, --source_block <optional>', 'Used block for comparing the states. Can be: latest, earliest, pending or a specific blocknumber. Default: latest.')
    .option('-T, --target_rpc <required>', 'Target RPC')
    .option('-t, --target_contract_address <required>', 'Target contract address')
    .option('-q, --fat_db [optional]', "Use key retrieval from parity's fat_db feature")
    .option('-p, --parity', 'Use parity compatible replay commands instead of geth')
    .parse(process.argv);

verify.isStateEqual(
    program.source_rpc,
    program.source_contract_address,
    program.source_block ? program.source_block : undefined,
    program.target_rpc,
    program.target_contract_address, 
    { 
        node: program.parity ? 'parity' : 'geth',
        fat_db: program.fat_db ? true : false
    }

).then(result => {
    if(result)
        console.log('The state of both smart contracts is equal');
    else
        console.log('The state of both smart contract IS NOT EQUAL');
}).catch((reason) => {
    console.log(`Something went wrong: ${reason}`);
}).then(() => {
    process.exit();
});