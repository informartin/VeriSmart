#!/usr/bin/env node

const program = require('commander');
const sharedAttributes = require('./index-shared-attributes');
const redeployFunc = require('../redeployContract');
const Web3 = require('web3');
const contractHelper = require('../contractHelper.js');
const fs = require('fs');

sharedAttributes(program);


program
    .option('-t, --target <required>', 'Target RPC')
    .option('-a, --address <required>', 'Address to use on target blockchain (unlocked)')
    .option('-s, --code_size [optional]', 'Max code size of contract in one transaction')
    .option('-f, --state_file [optional]', 'JSON file with key/value mapping of the state of the source contract')
    .parse(process.argv);

const node = program.parity ? 'parity' : 'geth';

// check if addresses have the right format.
const addressFormat = new RegExp(/0x[\d\w]{40}/);
if ((!addressFormat.test(program.contract) && program.state_file === undefined) || !addressFormat.test(program.address)) {
    console.log('Addresses are not in the correct format. Please use "0x..." as a format.');
    process.exit();
}

return new Promise(async (resolve) => {
    const stateJson = await contractHelper.readFromJSONFile(program.state_file);
    let config = await contractHelper.readFromJSONFile(program.config);
    if (config === undefined) {
        config = await contractHelper.readFromJSONFile('config.json');
        if (config === undefined) {
            console.log('No config file found. Please create one under PROJECT_DIR/config.json');
        }
    }

    await redeployFunc.portContract(
        Web3.utils.toChecksumAddress(program.contract),
        program.source,
        program.target,
        Web3.utils.toChecksumAddress(program.address),
        program.code_size ? program.code_size : 1000,
        {
            stateJson,
            config,
            deployment_tx_hash: program.deployment_hash ? program.deployment_hash : undefined,
            node: node,
            fat_db: program.fatDb ? program.fatDb : false,
            max_depth: program.recursion ? program.recursion : -1,
            block_number: program.block_number ? Web3.utils.toHex(program.block_number) : 'latest',
            targetFile: program.output ? program.output : undefined
        }
    );
    resolve();
}).then(() => {
    process.exit();
});
